push.txt
Created Tue Nov 10 11:26:54 AKST 2015
Copyright (C) 2015 by Raymond E. Marcil <marcilr@gmail.com>


Push an existing repository from the command line

  $ git remote add origin git@github.com:marcilr/git.git
  $ git push -u origin master

  --github.com/marcilr/git


  To remove current repo origin:
  $ git remote rm origin



Pushing to Your Remotes
=======================
When you have your project at a point that you want to share, you have to push
it upstream.  The command for this is simple: git push [remote-name]
[branch-name].  If you want to push your master branch to your origin server
(again, cloning generally sets up both of those names for you automatically),
then you can run this to push any commits you've done back up to the server:

  $ git push origin master

This command works only if you cloned from a server to which you have write
access and if nobody has pushed in the meantime.  If you and someone else
clone at the same time and they push upstream and then you push upstream, your
push will rightly be rejected.  You'll have to pull down their work first and
incorporate it into yours before you'll be allowed to push.

  -- git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes


Example 1
=========
Push go repo to github.

1. Create git-dev-lang-go of github
$ github-repo-create git-dev-lang-go.git

2. In home go repository at github repo as remote:
$ git remote add origin git@github.com:marcilr/git-dev-lang-go.git

3. List remotes:
go$ git remote -v
origin  git@github.com:marcilr/git-dev-lang-go.git (fetch)
origin  git@github.com:marcilr/git-dev-lang-go.git (push)
go$ 

4. Push go repo to github:
$ git push -u origin master


Example 2
=========
Push merged guthub repo to github.

1. Create new github github repo:
$ github-repo-create github

2. Added newly create github repo as remote:
$ git remote add origin https://github.com/marcilr/github

3. Inspect remotes of newly merged local github repo:
github$ git remote -v
origin  https://github.com/marcilr/github (fetch)
origin  https://github.com/marcilr/github (push)
revision-control-github ssh://git@github.com/marcilr/revision-control-github (fetch)
revision-control-github ssh://git@github.com/marcilr/revision-control-github (push)
revision-control-github-00INSTALL       ssh://git@github.com/marcilr/revision-control-github-00INSTALL (fetch)
revision-control-github-00INSTALL       ssh://git@github.com/marcilr/revision-control-github-00INSTALL (push)
revision-control-github-remotes ssh://git@github.com/marcilr/revision-control-github-remotes (fetch)
revision-control-github-remotes ssh://git@github.com/marcilr/revision-control-github-remotes (push)
revision-control-github-syntax  ssh://git@github.com/marcilr/revision-control-github-syntax (fetch)
revision-control-github-syntax  ssh://git@github.com/marcilr/revision-control-github-syntax (push)
revision-control-github-syntax-cli      ssh://git@github.com/marcilr/revision-control-github-syntax-cli (fetch)
revision-control-github-syntax-cli      ssh://git@github.com/marcilr/revision-control-github-syntax-cli (push)
revision-control-github-test    ssh://git@github.com/marcilr/revision-control-github-test (fetch)
revision-control-github-test    ssh://git@github.com/marcilr/revision-control-github-test (push)
syntax  https://github.com/marcilr/github-remotes-syntax (fetch)
syntax  https://github.com/marcilr/github-remotes-syntax (push)
github$

The above remotes are not needed remove them:
github$ git remote rm revision-control-github-00INSTALL
github$ git remote rm revision-control-github
github$ git remote rm revision-control-github-remotes
github$ git remote rm revision-control-github-syntax
github$ git remote rm revision-control-github-syntax-cli
github$ git remote rm revision-control-github-test
github$ git remote rm syntax


github$ git remote -v
origin  https://github.com/marcilr/github (fetch)
origin  https://github.com/marcilr/github (push)
github$

Looks good.

Pushed merged repo to github:
$ git push -u origin master
Username for 'https://github.com': marcilr
Password for 'https://marcilr@github.com': 
Counting objects: 254, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (187/187), done.
Writing objects: 100% (254/254), 49.67 KiB | 0 bytes/s, done.
Total 254 (delta 96), reused 118 (delta 58)
remote: Resolving deltas: 100% (96/96), done.
To https://github.com/marcilr/github
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.
github$

Done deal.

Example 3
=========
Push hardware repo to github:

1. Create hardware repo on github via web gui.

2. List and remove existing origin:
malachite:~/git/hardware$ git remote -v
origin  ssh://htpc/data/git/hardware (fetch)
origin  ssh://htpc/data/git/hardware (push)
marcilr@malachite:~/git/hardware$ git remote rm origin
marcilr@malachite:~/git/hardware$ 

3. Add remote github hardware repo as remote:
malachite:~/git/hardware$ git remote add origin https://github.com/marcilr/hardware

marcilr@malachite:~/git/hardware$ git remote -v
origin  https://github.com/marcilr/hardware (fetch)
origin  https://github.com/marcilr/hardware (push)
malachite:~/git/hardware$ 

4. Push hardware repo to github:

malachite:~/git/hardware$ git push -u origin master
Username for 'https://github.com': *** 
Password for 'https://***@github.com': 
Counting objects: 772, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (371/371), done.
Writing objects: 100% (772/772), 103.47 KiB | 0 bytes/s, done.
Total 772 (delta 433), reused 704 (delta 391)
remote: Resolving deltas: 100% (433/433), done.
To https://github.com/marcilr/hardware
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.
malachite:~/git/hardware$




Example 3
=========
Create and push to new github chrome repo

1. Create new github repo:
covellite:~$ github-repo-create chrome
debug() get-credentials() START
debug() main: CREDENTIALS: /home/marcilr/.github
debug() get-credentials() USER = marcilr
debug() get-credentials() PASS = ***
...
  "subscribers_count": 1
}
debug() repos-loop() END
covellite:~$

2. On existing local chrome repository list current remotes:
covellite:~/git/net/web/chrome$ git remote -v
origin	ssh://htpc/data/git/net/web/chrome/chrome (fetch)
origin	ssh://htpc/data/git/net/web/chrome/chrome (push)
covellite:~/git/net/web/chrome$ 

3. Remove remotes from current repository:
covellite:~/git/net/web/chrome$ git remote rm origin

covellite:~/git/net/web/chrome$ git remote -v
covellite:~/git/net/web/chrome$ 

4. Add new github chrome repo as remote:
covellite:~/git/net/web/chrome$ git remote add origin \
https://github.com/marcilr/chrome
covellite:~/git/net/web/chrome$ 

5. Push to github repository:
covellite:~/git/net/web/chrome$ git push -u origin master
Username for 'https://github.com': marcilr
Password for 'https://marcilr@github.com': 
Counting objects: 22, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (18/18), done.
Writing objects: 100% (22/22), 3.33 KiB | 0 bytes/s, done.
Total 22 (delta 6), reused 9 (delta 2)
remote: Resolving deltas: 100% (6/6), done.
To https://github.com/marcilr/chrome
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.
covellite:~/git/net/web/chrome$ 

6. Verify new populated githubv chrome repo:
https://github.com/marcilr/chrome

7. Remove local chrome repo:
covellite:~/git/net/web$ rm -rf chrome/

8. Updated manifest with:
ssh://htpc/data/git/net/web/chrome/chrome   chrome

  to:

ssh://git@github.com/marcilr/chrome   chrome

9. Pull down new repo:
covellite:~/git/net/web$ resync

  or

covellite:~/git/net/web$ git clone ssh://git@github.com/marcilr/chrome   chrome

10. Check checkout:
covellite:~/git/net/web$ ls chrome/
00INSTALL  chrome.txt  README  syntax
covellite:~/git/net/web$

Looks good!


Links
=====
Git Basics - Working with Remotes
https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes

git repo
https://github.com/marcilr/git
